const { log } = require('console')
const User=require('../models/usermodel')
const Product=require('../models/product')
const bcrypt=require('bcrypt')
const Otp=require('../models/otp')
const OTPgenerator=require('otp-generator')
const Category=require('../models/category')
const nodemailer=require('nodemailer')
const SendmailTransport = require('nodemailer/lib/sendmail-transport')



//home-----------------------------------------------------------------------------
const home=async(req,res)=>{
    try{
        let track
        let user
        const product = await Product.find({status:'Active'}).populate('category').lean();
        if(req.session.userid){
            track=true
            const mail=req.session.userid
            user=await User.findOne({email:mail})
           
            res.render('home',{track,product,user})
        }
        else{
            track=false
            res.render('home',{track,product,user})
        }
       


    }
    catch(error){
        console.log(error.message)

    }
    
}
//password hashing---------------------------------------------------------------


const passwordhash=async(password)=>{


    const hashed=await bcrypt.hash(password,10)
    return hashed
}
  
//loadlogin----------------------------------------------------------------------

const loadlogin=async(req,res)=>{

    try {
        const message = req.flash('success');
        res.render('login',{message})
        console.log(`conslefalsh is ${message}`)
      
    } catch (error) {
        console.log(error.message)

    }
}


//loadregister--------------------------------------------------------------------------

const loadregister=async(req,res)=>{
    try {
        let message
        res.render('register',{message})
    } catch (error) {
        console.log(error.message);
        
    }
}

//register--------------------------------------------------------------------------------
const register = async (req, res) => {
    try {
        const mail = req.body.email;
        const confirmpass= req.body.password2
        console.log(req.body.password)
        const userExist = await User.findOne({ email: mail });
        // console.log(`user ${userExist}`)

        if (userExist) {
            const verify = userExist.verified;
           //console.log(`verify ${verify}`)

            if (verify === true) {
               // const message = "User exists";
                req.flash('failed','User Already Exist')
                return res.render('register', { message :req.flash('failed')});
            } 
            else {

                if(confirmpass!==req.body.password){
                    req.flash('pass','Password does not match')
                   
                    res.render('register', { message :req.flash('pass')});
                  
                }
                else{
                    // Common code for user registration
                    const hashed = await passwordhash(req.body.password);
                    const user = new User({
                        name: req.body.name,
                        email: req.body.email,
                        mobile:req.body.mobile,
                        password: hashed
                    });
    
                    const userData = await user.save();
                    const id = userData._id;
                  
                    // Redirect to OTP page
                    return res.redirect(`/otp?id=${id}&mail=${mail}`);
                }
            }
        }

         else {

            if(confirmpass!==req.body.password){
                req.flash('pass','Password does not match')
               
                res.render('register', { message :req.flash('pass')});
              

            }
            else{
                // Common code for user registration
                const hashed = await passwordhash(req.body.password);
                const user = new User({
                    name: req.body.name,
                    email: req.body.email,
                    mobile:req.body.mobile,
                    password: hashed
                });

                const userData = await user.save();
                const id = userData._id;
              
                // Redirect to OTP page
                return res.redirect(`/otp?id=${id}&mail=${mail}`);
            }
            
        }
    } 

    catch (error) {
        console.log(error.message);
        
        const message = "An error occurred during registration";
        return res.render('register', { message });
    }
};

//loadotp-------------------------------------------------------------


const loadotp=async(req,res)=>{
    try {
    const id=req.query.id

    const mail=req.query.mail
    
    const test=await Otp.find({userid:id})
    if(test){
        console.log(test)
        await Otp.deleteMany({userid:id})
    }
        res.render('otp',{id,mail})
       
        const otp = Math.floor(1000 + Math.random() * 9000); // Generate a random 4-digit number
        const hashedotp = await bcrypt.hash(String(otp), 10);
       
        const otpsetup=await new Otp({
            userid:id,
            otp:hashedotp,
            createdAt:Date.now(),
            expireAt:Date.now()+66000

        })
        const otpsave=await otpsetup.save()
    


        const transporter=nodemailer.createTransport({
            service:'gmail',
            auth:{
                user:"deepakvkn1252@gmail.com",
                pass:'ursi lsmy iwpb sgcs'
            }
        })
      const mailoptions={
            from:"deepakvkn1252@gmail.com",
            to:mail,
            subject:"Footshow verification",
            text:`Welcome to Footshow, your verification otp is ${otp}`
        }
       await transporter.sendMail(mailoptions, (error, info) => {
            if (error) {
                console.log(error.message);
            } else {
                console.log(`Email sent: ${info.response}`);
            }
        });

    
        setTimeout(async () => {
            await Otp.deleteMany({ userid: id });
            console.log('OTP deleted after timeout');
        }, 44000);
        
    } catch (error) {
        console.log(error.message);
    }
}




//otp generator----------------------------------------------------------------------------------------------
const ootp=async(req,res)=>{
    try {
       
        
            const randomNumber = Math.floor(1000 + Math.random() * 9000); // Generate a random 4-digit number
    
        
        
    } catch (error) {
        console.log(error.message);
        
    }
    
    
}


//verify otp------------------------------------------------------------------------

const verifyotp=async(req,res)=>{
    const otp=req.body.otp
    const id=req.body.id
    const mail=req.body.mail
    const data=await Otp.findOne({userid:id})
    
    
    
    try {
        if(!data){
             // await Otp.deleteMany({userid:id})
             await User.deleteMany({_id:id})
             let message='Otp expierd'
              const c=true
             //console.log("invalid creadentials");
             res.render('otp',{message,c,id,mail})
        }
        else{
            expire= data.expireAt
            if(expire<Date.now())
            {
               // await Otp.deleteMany({userid:id})
                await  User.deleteMany({_id:id})
                let message='Your otp has been expired'
                
                res.render('otp',{message,id,mail})
            }

            else{
                        
                const verify=await Otp.findOne({userid:id})
                const dbotp=await verify.otp;
                const finalcheck= await bcrypt.compare(otp,dbotp)
            

                if(finalcheck){
                await Otp.deleteMany({userid:id})
                let message='User succesfully registerd'
                await User.updateOne({_id:id},{ $set: { verified: true } })

                //console.log("user regster success");
                res.render('login',{message})
                }
                else{
                // await Otp.deleteMany({userid:id})
                await User.deleteMany({_id:id})
                let message='Otp incorrect'
                 
                //console.log("invalid creadentials");
                res.render('otp',{message,id,mail})
                }
    
            }
        }
    
            
        }
      
 
    catch (error) {
        console.log(error.message);
        
    }

   
}
//login verify=========================================================================
const verifylogin=async(req,res)=>{

    try {
       const mail=req.body.email
       const password=req.body.password
      

    const userdata=await User.findOne({email:mail})

    if(userdata){
        const pass= await userdata.password

  
        const passwordcheck=await  bcrypt.compare(password,pass)
        


        if(passwordcheck){

            const verifycheck= await userdata.verified

            if(verifycheck){

            const status= await userdata.status

            if(status==='Active'){
                req.session.userid=userdata.email
                //console.log(req.session.userdata);
                const track=req.session.userid
         
                res.redirect('/')


            }
            else{
                req.flash('success','Access Denied')
                //let message='Access Denied'
                const message=req.flash('success')
                res.render('login',{message})
                console.log('login failed1');

            }


            }
            else{
                
                req.flash('failed','Incorrect Userid or Password')
               
                const message=req.flash('failed')
                res.render('login',{message})
                console.log('login failed1');
            }
        }
        else{
            
            req.flash('failed','Incorrect Userid or Password')
          
            
            res.render('login', { message: req.flash('failed') });
            console.log('login failed2');
        }


    }
    else{
        let message='invalid username or password'
        res.render('login',{message})
        console.log('login failed3');

    }


    } catch (error) {
        console.log(error.message);
    }
}

//logout------------------------------------
const logout = async (req, res) => {
    try {
        
         req.session.destroy()
        //console.log("destroy");
        
        
        res.redirect('/')
        


    } catch (error) {
        console.log(error.message);
    }
};

//load shop-------------------------------------------------------------------------------------------


const loadshop=async(req,res)=>{

    try {
        let track
        let user
        let totalproducts=await Product.find({status:'Active'}).count()
        let totalPages=Math.ceil(totalproducts/10)
        let currentPage = parseInt(req.query.page, 12) || 1;
        const skip=(currentPage-1)*12
        if(req.session.userid){
            track=true
            const mail=req.session.userid
            user=await User.findOne({email:mail})
           
            const product = await Product.find({status:'Active'}).populate('category')
            .skip(skip)
            .limit(12)
            .lean();
            const category = await Category.find({})
           
         
            res.render('shop',{product,category,user,track,totalPages,currentPage})
        }
        else{

            track=false
            const product = await Product.find({status:'Active'}).populate('category')
            .skip(skip)
            .limit(10
                )
            .lean();
            const category = await Category.find({})
            res.render('shop',{product,category,user,track,totalPages,currentPage})
           
            
        }

      
        
    } catch (error) {
        console.log(error.message);    }
}


// load single product --------------------------------------------------------------------------------

const loadsingleproduct=async(req,res)=>{

    try {
        const id=req.query.id
        
        //console.log(`id product is ${id} `);
        const product = await Product.findOne({_id:id}).populate('category').lean();

        
       res.render('singleproduct',{product})
        
    } catch (error) {
        console.log(error.message);
        
    }
}


//Load Men--------------------------------------------------------------------------------------

const loadmen=async(req,res)=>{

    try {
      
          let track
          let user
          let totalproducts=await Product.find({status:'Active',gender:'male'}).count()
          let totalPages=Math.ceil(totalproducts/12)
          let currentPage = parseInt(req.query.page, 10) || 1;
          const skip=(currentPage-1)*12
         if(req.session.userid){
            track=true
            const mail=req.session.userid
            user=await User.findOne({email:mail})
           
            const product = await Product.find({status:'Active',gender:'male'}).populate('category')
            .skip(skip)
            .limit(12)
            .lean();
            const category = await Category.find({})
         
            res.render('men',{product,category,user,track,currentPage,totalPages})
        }
        else{

            track=false
            const product = await Product.find({status:'Active',gender:'male'}).populate('category')
            .skip(skip)
            .limit(12)
            .lean();
            const category = await Category.find({})
           
            res.render('men',{product,category,user,track,totalPages,currentPage})
           
            
        }
        
        
    } catch (error) {
        console.log(error.message)
    }
}


//Load Women-------------------------------------------------------

const loadwomen=async(req,res)=>{

    try {
        let track
        let user
        let totalproducts=await Product.find({status:'Active',gender:'female'}).count()
        let totalPages=Math.ceil(totalproducts/12)
        let currentPage = parseInt(req.query.page, 10) || 1;
        const skip=(currentPage-1)*12
        
        if(req.session.userid){
          track=true
          const mail=req.session.userid
          user=await User.findOne({email:mail})
         
          const product = await Product.find({status:'Active',gender:'female'}).populate('category')
          .skip(skip)
          .limit(12)
          .lean();
          const category = await Category.find({})
         
       
          res.render('women',{product,category,user,track,currentPage,totalPages})
      }
      else{

          track=false
          const product = await Product.find({status:'Active',gender:'female'}).populate('category')
          .skip(skip)
          .limit(12)
          .lean();
          const category = await Category.find({})
          res.render('women',{product,category,user,track,currentPage,totalPages})
         
          
      }
        
        
    } catch (error) {
        console.log(error.message)
    }
}

//forgetpassword----------------------------------

const forgetpassword =async(req,res)=>{
    try {
        res.render('forgetpassword')
    } 
    catch (error) {
        console.log(error.message);
    }
}

//MAIL SEND----------------------------

const forgetpasswordmailsend=async(req,res)=>{
    try {
         const mail=req.body.email
         const user=await User.findOne({email:mail})

         if(!user){
            // res.render('forgetpassword')
            return res.status(403).json({ message: ' User not found' });
         }
         else{
            const check=await user.verified
           
            if(check!==true){
                
                return res.status(403).json({ message: 'User not verified' });
            }
            else{
                const id=user._id
                const resetPasswordLink = `http://localhost:12/resetpassword?id=${id}`;
                const transporter=nodemailer.createTransport({
                    service:'gmail',
                    auth:{
                        user:"deepakvkn1252@gmail.com",
                        pass:'ursi lsmy iwpb sgcs'
                    }
                })
              const mailoptions={
                    from:"deepakvkn1252@gmail.com",
                    to:mail,
                    subject:"Password Reset",
                    text:`Click on the link to reset your password ${resetPasswordLink}`
                }
               await transporter.sendMail(mailoptions, (error, info) => {
                    if (error) {
                        console.log(error.message);
                        return res.status(500).json({ message: 'Email sent failed' });
                    } else {
                        return res.status(200).json({ message: 'Email sent successfully' });
                        
                    }
                });
        


            }

            }

         //console.log(mail)


    } catch (error) {
        console.log(error.message);
    }
}


//reset password laod-------------------------------------

const resetpasswordload=async(req,res)=>{
    try {
        const id=req.query.id
    
        res.render('resetpassword',{id})
        
    } catch (error) {
        console.log(error.message)
    }
}

//reset password---------------------------------
const resetpassword = async (req, res) => {
    try {
        const id = req.query.id;
        const pass1 = req.body.password1;
        const hashedPassword = await passwordhash(pass1);
        const user = await User.findOne({ _id: id });

        if (user) {
            const update = await User.updateOne({ _id: id }, { $set: { password: hashedPassword } });
console.log(update)
            if (update.modifiedCount > 0) {
                // Password changed successfully
                return res.status(200).json({ message: 'Password changed successfully' });
            } else {
                // Password not changed (perhaps the new password is the same as the old one)
                return res.status(400).json({ message: 'Password not changed. Please try again.' });
            }
        } else {
            // User not found
            return res.status(404).json({ message: 'User not found' });
        }
    } catch (error) {
        console.log(error.message);
        return res.status(500).json({ message: 'Internal Server Error' });
    }
};


//Profile load 

const profileload =async(req,res)=>{
    try {
        const id=req.query.id
        const user=await User.findOne({email:id})
        //console.log(user)
        res.render('profile',{user})
        
    } catch (error) {
        console.log(error.message);
    }
}



//profile edit------------------------------------------------------------------------------------

const profileedit=async(req,res)=>{
    try {


        const{mobile,name}=req.body
        const id=req.query.id
        const user=await User.findOne({_id:id})
        if (!mobile && !name) {
            return res.status(400).json({ message: 'Mobile or name must be provided for update' });
        }

        if(user){
           const edited= await User.updateOne({_id:id},{$set:{
                name:name|| user.name,
                mobile:mobile||user.mobile
           }})
           if(edited.modifiedCount>0){
            const us=await User.findOne({_id:id})
            return res.status(200).json({message:"user updated",us})
           }

           else{
            return res.status(400).json({ message: 'No changes made to the user profile' });
           }
        }
        
        else{
           return res.status(404).json({ message: 'User not found' });
        }
        
    } catch (error) {
        console.log(error.message);
        return res.status(500).json({ message: 'Internal Server Error' });
    }
}


module.exports={
    home,
    loadlogin,
    loadregister,
    register,
    loadotp,
    verifyotp,
    verifylogin,
    logout,
    loadshop,
    loadsingleproduct,
    loadmen,
    loadwomen,
    forgetpassword,
    forgetpasswordmailsend,
    resetpasswordload,
    resetpassword,
    profileload,
    profileedit

}